Amazon elastic compute cloud - EC2 
----------------------------------
raw compute capacity 
need servers
aws servers are virtual 
flexible, cost effective, quick
long time to get it up and running 
delivery, installation, rack and stack, etc... = long time 

with aws..
not stuck with servers you dont need
only pay for running instances, not stopped or terminated
sharing host with other instances (virtual machine)
hypervisor - responsible for coordinating the mulitenancy - managed by aws 
mulitenancy - sharing underlying hardware between virtual machines 

EC2 instances are secure even though they share
  - instances are unaware 
  - choose windows or linux for EC2 config
  - you choose software 
  - resizable - virtual scaling
  - control the networking aspect (requests) public or private 
  - ease of provisioning
  - Compute as a Service (CaaS)

Launch, Connect, Use

EC2 Instances 
-------------
  - grouped by instance family
  - varied types of CPU, storage, networking capactiy
    - general purpose 
      - balanced
      - gaming 
      - backend for enterprise 
      - small and medium dbs
    - compute optimized 
      - high performance processors
      - gaming
      - web
      - scientific modeling
    - memory optimeized 
      - ideal for high-performance databases
      - lots of data that needs to be loaded
      - memory is temp space, programs are loaded from storage into memory
      - big db 
    - accelerated computing - floating points, pattern, graphing
    - storage optimized
      - suituble for data warehousing
      - high sequential read and write access ot large datasets
      - input / output per second (IOPS)

EC2 Pricing 
-----------
  - on-demand
    - short term, irregular
    - cant be interuppted
  - savings 
    - low prices in exchange for consistent usage
    - 1-year or 3-year 
    - 72% less than on-demand
  - reserved instances 
    - 75% off for a big term (1-3 years)
    - at the end of the term its on-demand unless you terminate, or purcahse a new one
  - spot instances 
    - aws an take it back. 2 min warning 
    - batch workloads 
    - flexible start and end times
    - use unsued EC2s
    - 90% off
    - background worker
    - not always available
    - no contract/commitment
  - dedicated hosts - physical hosts 
    - usually for regulations

Scaling EC2
-----------
  - average utlization is a problem 
  - provision workload for every peak and trough 
  - if one instance fails, just boot another one 
  - make it REDUNDANT = no single point of failure

Auto Scaling 
  - time outs when website has more requests than it can handle
  - automaically add or remove EC2 in response to demanad
  - dynamic (responds) or predictive (schedules) scaling 
  - use both!
  - scale up = more power! 
  - scale out = more instances
  - settings: minimum, desired, maximum
  
computing power is a programmatic resource

Directing Trafic with Elastic Load Balancing (ELB)
--------------------------------------------
  - a host can direct customer traffic
  - goal: even distribution of workload = load balancing 
  - many off the shelf load balancers 
  - aws Load Balancing = high performance, cost-efficient, highly available, auto scaling 
  - elastic load balancing (ELB)
  - its a regional construct (runs at the region level)
  - very available
  - scalable 
  - terminates after the requests are finished
  - ELB keeps it simpler 
  - Front end doesnt know or care about backend Instances
  - DECOUPLED Architecture 

Messaging and Queuing 
--------------------
  - if one is busy, it cant return for more work 
  - process can degrade 
  - queuing can prevent slow downs 
  - tightly coupled - if a single component fails - it causes failures elsewhere
  - loosely coupled - isolated to prevent cascading failures 
    - if one fails, they pile up in the queu
  - Amazon Simple Notification Service (SNS)
  - Amazon Simple Queue Service (SQS)

SQS
-----
  - send / store 
  - where messages are placed until they are processed

SNS 
-----
  - similar
  - pub sub = publish subscribe 
    - create a single topic, post a message there, and then its sent to all subscribers
    - subscribers can be web servers, email addresses, AWS Lambda functions, or several other options
  - web hooks 
  - fan out notifications to end users 


ADITIONAL COMPUTE SERVICES
--------------------------
EC2 is the standard - reliable, flexible, scalable 
more convienent from a management perspective 
'serverless' options: you cannoy see or access the underlying infrastructure
AWS Lambda - serverless option
  - allows you to upload to a lambda function
  - configure a trigger 
  - code is run a managed enviornment 
  - designed to run code in under 15 minutes (not deep learning)
Container Orchestration tools - docker 
  ECS - Amazon Elastic Container Service
  EKS - Amazon Elastic Kubernetes Service

container - package for your code
  - containers run ontop of EC2 instances , independantly 
  - host is an EC2 instance 

Cluster - number of containers 

EC2 
  - Traditional apps
  - full access to the OS

AWS Lambda
  - Run without needing to provision or manage servers
  - short running fxns 
  - Trigger based
  - service oriented apps
  - event driven apps 

- ECS or EKS ?
- EC2 instances or serverless Fargate (that is managed for you)

----------------
SUMMARY
----------------
Cloud computing
  - On demand delivery of IT resources over the internet with pay-as-you-go pricing

EC2 
  - dynamically spin up or down EC2 instances 
  - choose the instance family 
    - general 
    - compute optimized
    - memory optimized
    - accelerated computing
    - storaige optimized
  - Horizontal or Vertial Scaling 

ELB 
  - elastic load balancer 
  - useful for many EC2 instances
  - options
    - On demand 
    - spot instances 
    - reserved instances 
    - savings plans

SQS 
  - decouple 
  - messages remain in queue until consumed or deleted 

SNS 
ECS - container Orchestration
EKS - container Orchestration
AWS Fargate - no need to manage 
AWS Lambda - run based on triggers 