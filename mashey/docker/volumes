volumes 
=======================================================
Volumes are the preferred mechanism for persisting data 
generated by and used by Docker containers. 
While bind mounts are dependent on the directory 
structure and OS of the host machine, volumes are 
completely managed by Docker. 
Volumes have several advantages over bind mounts:

https://docs.docker.com/storage/volumes/

ability to connect specific filesystem paths of the conatiner back to the host machine

NAMED VOLUMES 

MOUNTING = creating a volume and attatching 


volumes : 
    named volumes : bucket of data 
    bind mounts : specify where we store the data on the host (mountpoint)
    
                                                Named Volumes	            Bind Mounts
Host Location	                                Docker chooses	            You control
Mount Example (using -v)	                    y-volume:/usr/local/data	/path/to/data:/usr/local/data
Populates new volume with container contents	Yes	                        No
Supports Volume Drivers	                        Yes	                        No


****************************************************
PERSISTING OUT DB 
----------------------------------------------------
app should retain information form container to container 

create the volume
    $ docker volume create todo-db
run it w/ the volume
    $ docker run -dp 3000:3000 -v todo-db:/etc/todos getting-started


find it 
    $ docker volume ls 
inspect it 
    $ docker volume inspect <volume-tag>






--------------------------------------------------------------------
"Scratch Space" is an area that wont be pushed from cont to cont 


"exec" into a docker container 
    $ docker exec <container-id> cat /data.txt 
    # where data.txt is already defined...


