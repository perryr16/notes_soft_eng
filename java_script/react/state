dynamic values 
similar to props 
not passed like props 
declare it in a constructor method

this.state = {}
this.state.propertyName <<< access it
this.setState({name:value}) <<< set it

BIND THIS
if function body contains 'this', use 
    this.propertyName = this.propertyName.bind(this)
        whenever you define an event handler that uses this, 
        you need to add this.methodName = this.methodName.bind(this) 
        to your constructor function.

setState((previousState, props) => new_state)
setArray((prev) => ([new_element, ...prev]));
// where previousState is always known, just make up the block variable name


REACT COMPONENTS ALWAYS NEED TO CALL SUPER IN CONSTRUCTOR 
USAGE
------
class Example extends React.Component {
  constructor(props) {
    super(props);
    this.state = { mood: 'decent' };
  }
 
  render() {
    return <div></div>;
  }
}
 
<Example />



===
  const handleChange = ({ target }) => {
    const {name, value } = target;
    setProfile((prevProfile) => ({
      ...prevProfile,
      [name]: value
    }));
  };


///////
EXAMPLE 
///////
export default function AppFunction() {
  const [newTask, setNewTask] = useState({});
  const handleChange = ({ target }) => {
    const { name, value } = target;
    setNewTask((prev) => ({ ...prev, id: Date.now(), [name]: value }));
    };

  const [allTasks, setAllTasts] = useState([]);
  const handleSubmit = (event) => {
    event.preventDefault();
    if (!newTask.title) return;
    setAllTasts((prev) => [newTask, ...prev]);
    setNewTask({});
  };
  const handleDelete = (taskIdToRemove) => {
    setAllTasts((prev) => (prev.filter((task) => task.id !== taskIdToRemove)));
  };

  return (
      <main>
        <h1>Tasks</h1>
        <NewTask
          newTask={newTask}
          handleChange={handleChange}
          handleSubmit={handleSubmit}
        />
        <TasksList allTasks={allTasks} handleDelete={handleDelete} />
      </main>
    );
}
