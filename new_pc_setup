https://mod0.turing.io/setup-instructions

--------------------------------------------------
--------------------------------------------------
--------------------------------------------------

Turing Environment Setup Instructions
Getting Your Computer Ready For Programming
Tech Setup
Complete the following steps before Mod 0 in order to get the tools you‚Äôll need on your machine.

If you‚Äôd like to watch a video overview, a Turing alum who is at least partially competent gainfully employed in the software development industry put this video together for you, which walks through most of this guide:


The above video has shortcuts to specific pieces of this guide. Click over to it and read the video description to jump to just the right sections.

Here‚Äôs what we‚Äôll cover in this guide. Click a link to jump to that portion of the guide:

New to Mac?
Install Atom as your Text Editor
Install Xcode-select
Install Homebrew
Setup Github
Install Git
Configure Git
Install Chrome
Set Up Terminal Access for Atom
Add GitHub SSH Keys
Install Rectangle
Lets get started:

1) New to Mac?
If this is your first time using a Mac instead of a PC or Linux, then watch this video about the basics of using a Mac.

2) Install Atom as your Text Editor
Install Atom. Atom is a program where we edit code - it is a text editor with many great features that makes editing code more enjoyable compared to a simple text editor. Atom is commonly used in the software development industry, and we will use it throughout your time at Turing.

3) Install Xcode-select
Xcode is a suite of development tools published by Apple. If we wanted to develop software for the Apple Ecosystem (iPhone apps, macOS apps, etc), we would use Xcode as our editor. But even though we‚Äôre not building iPhone apps, Xcode provides some system dependencies that we need.

Rather than download Xcode via the Apple Store, we can get a much smaller selection of necessary tools, called xcode-select, via our terminal.

Follow these steps to get Xcode-select installed on your machine:

Open the Terminal by pressing the Command + Space keys at the same time, which opens Spotlight, and then type Terminal into the search.
Press the enter key to open Terminal
Once terminal is open, type the following without the $ symbol:
  $ xcode-select --install
When prompted, enter the password you use to login to your computer.
Check that installation was succesful by typing xcode-select in your terminal. You should see something like this:
$ xcode-select
xcode-select: error: no command option given
Usage: xcode-select [options]

Print or change the path to the active developer directory. This directory
controls which tools are used for the Xcode command line tools (for example,
xcodebuild) as well as the BSD development commands (such as cc and make).

Options:
  -h, --help                  print this help message and exit
.
.
.
A note on convention
When you see a $ before a line, it means ‚Äúenter what follows the dollar sign as a terminal command‚Äù.

Lines that don‚Äôt have a $ are usually what is printed out as a result of the command.

A . on adjacent lines means ‚Äúomitted text here‚Äù. For example:

$ xcode-select
Usage: xcode-select [options]

Print or change the path to the active developer directory. This directory
controls which tools are used for the Xcode command line tools (for example,
xcodebuild) as well as the BSD development commands (such as cc and make).

Options:
  -h, --help                  print this help message and exit
.
.
.
4) Install Homebrew
Homebrew is a package management system that makes it easy to install hundreds of open source projects and compile them from source for maximum performance on your machine.

Follow these steps to get Homebrew installed on your machine:

Open Terminal. Again, you can get to Terminal by pressing the Command + Space keys at the same time, then typing Terminal into the search.

Once you have Terminal open, paste this line and hit enter. (remember, skip the $)

/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
When prompted, enter the password you use to login to your computer. It needs this because it installs its packages in a place that all users of this computer can access.

When the process has completed, you will be given instructions for updating your PATH - follow the output from your terminal. It should look similar to this:
==> Next steps:
- Add Homebrew to your PATH in /Users/yourname/.zprofile:
 echo 'eval $(/opt/homebrew/bin/brew shellenv)' >> /Users/yourname/.zprofile
 eval $(/opt/homebrew/bin/brew shellenv)
When it has completed the installation, type brew doctor in your terminal + press enter. It should tell you that everything is fine:
$ brew doctor
Your system is ready to brew.
I followed the above instructions and Homebrew won‚Äôt install!
No worries! This likely means you have one of Apple‚Äôs newest M1 laptops - fancy you üòâ ! Essentially, some programs are not currently supported with this setup, Homebrew being one of them.

However, there is another way to get Homebrew installed using a program that‚Äôs built into your Mac known as Rosetta

This video does a solid job of walking you through the steps to install Homebrew using Rosetta - don‚Äôt worry about the native setup.

I‚Äôve also outlined the steps here:

Open a Finder window by pressing CMD + N on your Desktop. You can also use Spotlight by pressing CMD + Space and searching for Finder
Click on the Applications folder on the left sidebar
Click into the folder called Utilities
Right click on the Terminal app and choose Get Info
Check the box that says Open using Rosetta
Open the Terminal app by either double clicking the icon or using a Spotlight search for Terminal
Proceed with Step 2 from the instructions above this section!
5) Setup Github
If you haven‚Äôt had a chance to sign up for Github, now is a good time to do that.

Update your GitHub Profile and be sure that you choose a username, status, profile info and picture that is PROFESSIONAL and APPROPRIATE! Future employers will be looking at your Github to see your projects, code, etc.

6) Install Git
Git is a Version Control System (VCS). It allows you to save work on your project, and reference previous states of a project if needed. Normally when we save something on our computer, the newer version overwrites the older version. This is problematic if we need to look back at an earlier version. Git solves this problem by providing you multiple save points. You can get the current version, and ANY previous version. Git‚Äôs philosophy: never lose anything.

One other thing to clear up - git is not the same thing as Github. You‚Äôll learn more about how they interact in Mod 0!

To install Git, we will use Homebrew. Follow these steps to install git on your machine:

Open your Terminal, and type this:
$ brew install git
Check that it was successful by typing git in the terminal. It should output:
$ git
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one
.
.
.
7) Configure Git
We‚Äôll want to configure git with some basic information about us.

We can tell git to configure itself using the git config command from our terminal. Additionally, we‚Äôre setting ‚Äúglobal‚Äù configurations for git, so we‚Äôll use the ‚Äìglobal flag when we provide it with a new piece of configuration.

Open Terminal with Spotlight search (press the Command + Space keys like we did previously).
Type the following, one at a time, SUBSTITUTING YOUR OWN NAME AND EMAIL for the first two commands:
git config --global user.name "Eric Weissman"
git config --global user.email eric@example.com
git config --global init.defaultBranch main
git config --global core.editor "atom --wait"
git config --global pull.rebase false
You can verify that this is working by typing git config --list in your terminal and checking the output:
$ git config --list
credential.helper=osxkeychain
user.name=Eric Weissman
user.email=eric@example.com
init.defaultbranch=main
core.editor=atom --wait
pull.rebase=false

If you get ‚Äústuck‚Äù in the screen showing the output of git config --list, don‚Äôt panic! Just type q, and you should get back to your regular terminal.

8) Install Chrome
If you‚Äôre not already using Chrome, install it from here. Chrome includes a set of developer tools that will come in handy down the road. Additionally, it is always on the cutting edge of being able to support new web technologies.

You‚Äôve done a lot of environment setup! How about you take a break, go for a walk, drink some water.

We‚Äôll be here when you get back. :)

9) Set Up Terminal Access for Atom
Install the shell commands for Atom. Open Atom, drop down the Atom menu in the top left corner of your screen, and click on Install Shell Commands. Atom should now be enabled from your command line.

Install Shell Commands

To confirm that Atom is working from your command line, complete the following steps:

Open Terminal with Spotlight search (Command + Space), type terminal and hit enter.
Type atom . in your terminal. Be sure to include a space between atom and the . If it is setup correctly, the atom editor will automatically open.
If you get an error, make sure you‚Äôve selected Install Shell Commands from the Atom menu.
If is still not working, try entering this in the command line:
ln -s /Applications/Atom.app/Contents/Resources/app/atom.sh /usr/local/bin/atom

Try opening Atom from the command line/terminal by typing atom . If it‚Äôs still not working, message one of the Turing staff, or mention this in your cohort channel. We‚Äôll get this squared away!
Atom also offers a number of different options and packages that you can customize to your liking. This series of videos will walk you through many of them if you‚Äôd like to dive deeper.

10) Add GitHub SSH Keys
SSH keys are a more secure and convenient way of authenticating than typing in our password every time we want to interact with Github.

This is getting fairly advanced, so if you want to stop the setup instructions here, and come back later once you‚Äôre annoyed at entering your Github password regularly, that‚Äôs totally fine.

This can be a bit tricky to do, so here‚Äôs another quick walk-through, of just adding Github SSH keys:


1. Generate a new key by running:
Follow these steps to generate a new key:

Open terminal and enter the following command - You should use the email associated with your GitHub account
$ ssh-keygen -t rsa -C "johndoe@example.com"
When you‚Äôre prompted to ‚ÄúEnter a file in which to save the key,‚Äù press Enter. This accepts the default file location, which is ~/ssh/id_rsa

When asked to enter a password, hit enter, which means ‚Äúno password‚Äù.

You‚Äôll see a confirmation message that looks like:

Your identification has been saved in id_rsa.
Your public key has been saved in id_rsa.pub.
The key fingerprint is:
SHA256:C3AB8FF13720E8AD9047DD39466B3C8974E592C your@email_address.com
The key's randomart image is:
+---[RSA 2048]----+
| .       =   ..  |
|o . . o + = ..   |
| =.o o o o o  .  |
|+ +o. .  ..  . . |
|.+E  .  S   o o..|
|..     .  .o . .+|
|        o  oo .o+|
|       . o  ==o.=|
|        . .+=B=o |
+----[SHA256]-----+
2. Add this new key to your system by running:
In your terminal, run:
$ ssh-add ~/.ssh/id_rsa
3. Copy the new public key to your clipboard:
In your terminal, run:
$ pbcopy < ~/.ssh/id_rsa.pub
4. Tell GitHub about this key.
Go to https://github.com/settings/keys
Click the green New SSH key button.
Leave the title section empty
Paste the key into the key section with Command + v.
Hit the green Add SSH key button.
To test that our key is configured, type the following into the command line:

In your terminal, run:
$ ssh -T git@github.com
If you get a prompt similar to this:

The authenticity of host 'github.com (192.30.252.153)'... can't be established.
RSA key fingerprint is 00:11:22:33:44:55:66:77:88:99:aa:bb:cc:dd:ee:ff.
Are you sure you want to continue connecting (yes/no)?
Type yes
If everything‚Äôs working, you‚Äôll see the the following:

Hi <your_username>! You've successfully authenticated, but GitHub does not provide shell access.
Great work! You‚Äôve connected your terminal to your Github profile. You can now interact with Github from your terminal without entering your password all the time.

11) Install Rectangle
Install Rectangle - Rectangle allows you to move and resize windows so you can watch the Zoom call and work in the terminal for your technical sessions.

Once you‚Äôve installed Rectangle, open the app and it will run in the background. You should see a smaller version of the Rectangle icon in the top right corner of your screen.

Take some time to play around with the commands to adjust the positioning and size of different windows on your screen using the Rectangle shortcuts!

You‚Äôre Done!
Give yourself a pat on the back.

congrats