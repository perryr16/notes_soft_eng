$ git rebase 
"looks like entire feature was developed in a single series of well-planned commits"

similar to $ git merge

'powerful rewriting feature'
manual and interactive 
new branch that may look the same has new commits

maintain a linear project history
a clean merge
'I want to base my changes on what everybody has already done'
never rebase commits once theyve been pushed to a public repo
rebasing would replace old commits with new ones

git rebase interactive
$ git rebase <base>
$ git rebase --i <base> this will open that terrible editor

rebasing can change order and multiple commits & stuff

good for cleaning up 'messy' commits
squash insignificant commits
makes the whole project look like a clean well planned commit history

$ git rebase --d during playback, commit will be discarded
$ git rebase --p leave commit as is
$ git rebase --x exicute script on each commit
$ git rebase --continue advance the rebase when conflict
$ git reabse --abort reset the rebase when conflict
$ git reflog // reflog of remote branch

git config
----------
rebase.start
rebase autoSquash 
rebase.missingCommitsCheck
rebase.instructionFormat

customizing commit history
-------------------------
$ git rebase -i feature 
pick 33d5b7a Message for commit #1
fixup 9480b3d Message for commit #2
pick 5c67e61 Message for commit #3



$ git rebase --onto <newbase> <oldbase>

DANGER!
-------
to avoid merge conflicts, frequently rebase against master