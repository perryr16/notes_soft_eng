SLICE: createSlice()
   - typical to define 1 reducer for each slice 
   - called a 'slice reducer'
   - no more switch/case statement
   - action creators will be autogenerated 
   - no default handler 
   - no need to write immutable fxns 

# /dogSlice.js 
import {createSlice} from '@reduxjs/toolkit'

const options = {
   name: '', 
   initialState: [] | {} | '' | 123 | true, 
   reducers: {
      actionDog1: (state, action) => { return x},
      actionDog2: (state, action) => { return x},

      }
   }

const dogSlice = createSlice(options)
export const {actionDog1, actionDog2} = dogSlice.actions

ex
--------------------
import {createSlice} from '@reduxjs/toolkit'

const options = {
 name: 'todos',
 initialState: [],
 reducers: {
   addTodo: (state, action) => {
     return [
       ...state,
       {
         id: action.payload.id,
         text: action.payload.text,
         completed: false
       }
     ]
   },
   toggleTodo: (state, action) => {
     return state.map(todo =>
       (todo.id === action.payload.id) ? { ...todo, completed: !todo.completed } : todo
     )
   }
 }
}
 
const todosSlice = createSlice(options);

///// Object returned by todosSlice //////
{
 name: 'todos',
 reducer: (state, action) => newState,
 actions: {
   addTodo: (payload) => ({type: 'todos/addTodo', payload}),
   toggleTodo: (payload) => ({type: 'todos/toggleTodo', payload})
 },