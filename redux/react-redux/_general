react-redux 
   solves a lot of problems
   - give store access to any file 
      - dont pass state and dispatch
   - no more prop drilling  
   - no more store.subscribe(render)

Provider:
   - gives all components access to store 
useSelector():
   - selects data from the store 
useDispatch(): 
   - updates the store 


Architeture:
   Index.js 
      import {Provider} from 'react-redux';
      import {store} from './store.js
      wrap <Provider store={store}> <App /> </Provider>
   FeatureSlice.js
      define actions --> export const loadDogs = () => return{type: 'dogs'/loadDogs', payload: allDogs}
      define reducer --> export const dogsReducer = (initialState = value, action) => { switch(action.type)...}
      define selectors --> export const selectDogs = (state) => state.dogs
   Feature.js 
      import { useSelector, useDispatch } from 'react-redux';
      import {selectors} from FeatureSlice.js
      export const FeatureComponent = () => {
         const allDogs = useSelector(selectDogs)
         const dispatch = useDispatch()
         const handleClick = (dog) => { dispatch(addDog(dog))}
      }
   /src/app/store.js 
      import {createStore, combineReducers}
      import {all the reducers} from FeatureSlice.js 
      export const store = createStore(combineReducers({slice1 = slice1Reducer, slice2 = slice2Reducer}))

   

EX: 

import { useSelector, useDispatch } from 'react-redux';
import { selectTodo } from './todoSlice.js';
import { removeTodo } from './todoSlice.js';
 
const Todo = () => {
  const todo = useSelector(selectTodo);
  const dispatch = useDispatch();
 
  return (
    <button onClick={() => dispatch(removeTodo(todo))}>
      {todo}
    </button>
  )
}

