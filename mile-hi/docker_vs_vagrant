DOCKER VS vagrant

well what is vagrant 
--------------------
works on my machine, doesnt work in production or someone elses.
enviormnets are not the same! 
vagrant saves settings in a virtual enviroment and then push that to github 


DOCKER 
-------
run off containers 
dockerfiles are small (20 lines)
dockerfiles build docker images 
docker image contains project code, installation of node.js, installments of programs, complete project image. designed to sit ontop of a machine 
VM contains docker image, run an image as a container, can run as many containers as I want

dont put code in enviroments, actually build enviorments
if I have docker on my machine, it will work. if you have docker on your machine, it will work
docker image is saved to docker hub (like github )

apps run as docker containers

---------
'dockerize'
------------
container management software 
docker image: blueprint of a container - instructions for building 
  - snapshot of a container 
  - made up of layers
    - base - ubuntu
    - software files 
    - dependencies 
    ... layers 

contianer:  a running instance of a docker image 
when a blue print is run it becomes a container 

EASY INSTALL! collaboration, flexibility, totality

VM vs container: 
  - vm has a complete opperation system on it
  - hardware is virtualized through a hypervisor 

  -container virtualizes the operating system, no guest operating system. 

  DIFF: container virtualizes operating system
  VM : complete operating system on it, virtuizes hardware

containers are FAST, more portable

--------
DOCKER USE 
-------------
docker image = blueprint 
container = run the blueprint 

hub.docker.com 

can pull images into your container 

how do you build the image
--------------------------
always check hub.docker.com

look at "anatomy of a docker file" or just docker documentation

Need a FROM 
RUN executes commands 
WORKDIR working directory
COPY package.json . (to workdir)

Feels a lot like heroku or travis CI

COPY . . or COPY . /app/src

EXPOSE 3000 (browser port that container listens on)

CMD ["npm", "start"] 

TO BUILD THE image 
-------------------
$ docker build <current directory> -t <name of image>
$ docker images --> show all images


or cmd shft p -> docker images: build images, docker, name, enter

$ docker images

