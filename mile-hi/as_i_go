flash messages
-------------
store.handleSuccess('message')
store.handleErrors(err)

class methods dont need arrow function
class X {
  method1() {
    do this
  }
}

COMPONENTS: split the UI into indepdendant reusable pieces. 
- accepts a single 'props'
- returns a react element
functional component
------------
const Welcome = (props) => {
  return <h1> hello, {props.name} </h1>;
}
class component 
----------------
class Welcome extends React.Component {
  render() {
    return <h1> hello, {this.props.name}</h1>;
  }
}
PROPS: stands for properties

can do:
const element = <Welcome name="sara" />;

STATE is similar to props
- is private 
- fully controlled by the component

class components should alwys call the base constructor with 'props'


Context 
--------------
a way to pass data through the component tree without having to pass props down manually
typically data is passed top-down (parent-child) via props
context share values

Hooks
-----
a special function that lets you 'hook into' react features
related to removing classes - classes are confusing
'this' is werid
related to props, state, context, refs, and lifecycle

hooks exicute behind the scenes

useState(<initial>);
------------------
useState allows you to set values between function calls - normally values disappear
returns 
- current state (loading)
- function that updates it (setLoading)
second variable (fxn) can be called anything: setLoading, updateLoading...

Higher Order components
-----------------------

:::::::::
11.12.20
:::::::::

useEffect Hook
-------------
lets you perform side effects in function components
similar to componentDidMount / componentDidUpdate / componentWillUnmount
run code after React has updated the DOM
DO SOMETHING AFTER RENDER 
by putting it in a component we have access to variables

side effect examples
- data fetching
- setup a subscription 
- changing the dom

stripe webhooks
---------------
server > webhooks controller 
https://api.blush-now
comes in as a post 
stripe method 

provider model  
bypass the payout 
stripeBalance
updateBalance


webhooks
=========

react vs react native 
=====================
react is that JS that compiles to HTML
native compiles to native IOS


SIMULATOR
----------
installed with x-code 

scenes / screens = mobile routes
library = react Navigation

this is in DMC - house development - department of defence -> 

like a CRM...?

-------------
Hooks
https://vincit.github.io/objection.js/guide/hooks.html#instance-query-hooks
used in booking.js 
$before...
$after...
$around...
not before insert 
async $afterInsert(queryContext) {
  // copy over super 
  await super.$afterinsert(queryContext) //overide inheriting class //over to app model line 49 ($afterInsert)
  await this.createSearchRecord(['[customer, provider']])
  // get rid of the second use of model
}
in app -> remove model, use this.$query

super is what we are inheriting from

after delete need ID but, its been deleted... keep in the controller?
id is on req.params.id 
GET RID OF MODEL this. instead 
can reaplce it with tableName

search for createSearchRecord updateDestroy

use this. instead of model. Id is on req.params.id

need to actually change a model before updating 
app model changes out 

things that are in: 3 books on booking model