Rietta Interview 
----------------
sql injections - how would I prevent them 
query parametererization can be used 

sql injections: create a user name that has a sql name FROM * users

never input something from a user without parameterizing

how would you setup a database that has to do with financial transactions 
  - I wouldnt, I'd trust a trusted company like stripe for example 
  - otherwise I would encrpyt the card info in the front end,
  - store the encrtypted numbers in the back end, where the backend has no knowedge of the encryption key
  - then decrypt on the front end

Timing is important 

brush up on database setup 

agile workflow 
  - talk frequently 
  - get feedback 
  - modify if needed 
  - 2 week sprints 

testing, importance of 
  - documentation 
  - scalablity 
  - confidence 
  - speed

working remote 
  - its why I got into this

HIPA certification : working with sensitive medical data 

Ask about docker : how has it increased your efficiency

up against some 1911 turing grads 

Travis CI
Circle CI 
Jenkins 

fishing attacks - strong passwords 
-------
preventing SQL INJECTIONS 
1. use of prepared statements (with parameterized queries)
2. use of stored procedures 
3. whitelist input validation 
4. escaping all user supplied input

1. prepared statemtns with variable binding aka parameterized quereis.
they are simple to write 

  1. close the query: ')
  2. insert the attack: or admin='t'
  3. prevent server modifications: --

a parameterized value works by separating the sql call. It sets up a 2 part template. where the first element is the column and the second is the value. This way you can get unexpected results 
User.where(["name = ?", "#{params}"])
always looking at name 
second value cannot escape 
cannot move on to the next as it is referencing just a column element